// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // FreeDns specific fields
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  plan          UserPlan  @default(FREE)
  subdomains    Subdomain[]
  dnsRecords    DnsRecord[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// FreeDns specific models
enum UserPlan {
  FREE
  PRO
  ENTERPRISE
}

enum RecordType {
  A
  CNAME
  SRV
}

model Subdomain {
  id          String      @id @default(cuid())
  name        String      @unique // e.g., "myapp" for myapp.freedns.flaxa.tech
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  dnsRecords  DnsRecord[]
  
  @@index([userId])
}

model DnsRecord {
  id          String     @id @default(cuid())
  type        RecordType
  name        String     // Record name (can be @ for root)
  value       String     // Record value (IP, CNAME target, etc.)
  ttl         Int        @default(300)
  priority    Int?       // For SRV records
  weight      Int?       // For SRV records
  port        Int?       // For SRV records
  
  subdomainId String
  subdomain   Subdomain  @relation(fields: [subdomainId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([subdomainId])
  @@index([userId])
}